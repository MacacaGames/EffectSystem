// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MacacaGames.EffectSystem.Resolvers
{
    public class EffectSystemResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new EffectSystemResolver();

        private EffectSystemResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = EffectSystemGeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class EffectSystemGeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static EffectSystemGeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(8)
            {
                { typeof(global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>), 0 },
                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>), 1 },
                { typeof(global::System.Collections.Generic.List<int>), 2 },
                { typeof(global::System.Collections.Generic.List<string>), 3 },
                { typeof(global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy), 5 },
                { typeof(global::MacacaGames.EffectSystem.Model.ConditionRequirement), 6 },
                { typeof(global::MacacaGames.EffectSystem.Model.EffectInfo), 7 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::MacacaGames.EffectSystem.Model.ConditionRequirement>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<int>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 5: return new MacacaGames.EffectSystem.Formatters.MacacaGames.EffectSystem.Model.EffectInfo_EffectTaxonomyFormatter();
                case 6: return new MacacaGames.EffectSystem.Formatters.MacacaGames.EffectSystem.Model.ConditionRequirementFormatter();
                case 7: return new MacacaGames.EffectSystem.Formatters.MacacaGames.EffectSystem.Model.EffectInfoFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MacacaGames.EffectSystem.Formatters.MacacaGames.EffectSystem.Model
{

    
    public sealed class EffectInfo_EffectTaxonomyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MacacaGames.EffectSystem.Formatters.MacacaGames.EffectSystem.Model
{
    public sealed class ConditionRequirementFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MacacaGames.EffectSystem.Model.ConditionRequirement>
    {
        // inputType
        private static global::System.ReadOnlySpan<byte> GetSpan_inputType() => new byte[1 + 9] { 169, 105, 110, 112, 117, 116, 84, 121, 112, 101 };
        // requirementLogic
        private static global::System.ReadOnlySpan<byte> GetSpan_requirementLogic() => new byte[1 + 16] { 176, 114, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 76, 111, 103, 105, 99 };
        // isCheckOwner
        private static global::System.ReadOnlySpan<byte> GetSpan_isCheckOwner() => new byte[1 + 12] { 172, 105, 115, 67, 104, 101, 99, 107, 79, 119, 110, 101, 114 };
        // conditionValue
        private static global::System.ReadOnlySpan<byte> GetSpan_conditionValue() => new byte[1 + 14] { 174, 99, 111, 110, 100, 105, 116, 105, 111, 110, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MacacaGames.EffectSystem.Model.ConditionRequirement value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_inputType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.inputType, options);
            writer.WriteRaw(GetSpan_requirementLogic());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.requirementLogic, options);
            writer.WriteRaw(GetSpan_isCheckOwner());
            writer.Write(value.isCheckOwner);
            writer.WriteRaw(GetSpan_conditionValue());
            writer.Write(value.conditionValue);
        }

        public global::MacacaGames.EffectSystem.Model.ConditionRequirement Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MacacaGames.EffectSystem.Model.ConditionRequirement();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_inputType().Slice(1))) { goto FAIL; }

                        ____result.inputType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_requirementLogic().Slice(1))) { goto FAIL; }

                        ____result.requirementLogic = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_isCheckOwner().Slice(1))) { goto FAIL; }

                        ____result.isCheckOwner = reader.ReadBoolean();
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_conditionValue().Slice(1))) { goto FAIL; }

                        ____result.conditionValue = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EffectInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MacacaGames.EffectSystem.Model.EffectInfo>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_type() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // inputType
        private static global::System.ReadOnlySpan<byte> GetSpan_inputType() => new byte[1 + 9] { 169, 105, 110, 112, 117, 116, 84, 121, 112, 101 };
        // taxonomy
        private static global::System.ReadOnlySpan<byte> GetSpan_taxonomy() => new byte[1 + 8] { 168, 116, 97, 120, 111, 110, 111, 109, 121 };
        // inputBase
        private static global::System.ReadOnlySpan<byte> GetSpan_inputBase() => new byte[1 + 9] { 169, 105, 110, 112, 117, 116, 66, 97, 115, 101 };
        // activeCondition
        private static global::System.ReadOnlySpan<byte> GetSpan_activeCondition() => new byte[1 + 15] { 175, 97, 99, 116, 105, 118, 101, 67, 111, 110, 100, 105, 116, 105, 111, 110 };
        // activeRequirementLists
        private static global::System.ReadOnlySpan<byte> GetSpan_activeRequirementLists() => new byte[1 + 22] { 182, 97, 99, 116, 105, 118, 101, 82, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 76, 105, 115, 116, 115 };
        // deactiveCondition
        private static global::System.ReadOnlySpan<byte> GetSpan_deactiveCondition() => new byte[1 + 17] { 177, 100, 101, 97, 99, 116, 105, 118, 101, 67, 111, 110, 100, 105, 116, 105, 111, 110 };
        // deactiveRequirementLists
        private static global::System.ReadOnlySpan<byte> GetSpan_deactiveRequirementLists() => new byte[1 + 24] { 184, 100, 101, 97, 99, 116, 105, 118, 101, 82, 101, 113, 117, 105, 114, 101, 109, 101, 110, 116, 76, 105, 115, 116, 115 };
        // triggerTransType
        private static global::System.ReadOnlySpan<byte> GetSpan_triggerTransType() => new byte[1 + 16] { 176, 116, 114, 105, 103, 103, 101, 114, 84, 114, 97, 110, 115, 84, 121, 112, 101 };
        // activeProbability
        private static global::System.ReadOnlySpan<byte> GetSpan_activeProbability() => new byte[1 + 17] { 177, 97, 99, 116, 105, 118, 101, 80, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121 };
        // deactiveProbability
        private static global::System.ReadOnlySpan<byte> GetSpan_deactiveProbability() => new byte[1 + 19] { 179, 100, 101, 97, 99, 116, 105, 118, 101, 80, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121 };
        // activeMaintainActions
        private static global::System.ReadOnlySpan<byte> GetSpan_activeMaintainActions() => new byte[1 + 21] { 181, 97, 99, 116, 105, 118, 101, 77, 97, 105, 110, 116, 97, 105, 110, 65, 99, 116, 105, 111, 110, 115 };
        // activeMaintainRounds
        private static global::System.ReadOnlySpan<byte> GetSpan_activeMaintainRounds() => new byte[1 + 20] { 180, 97, 99, 116, 105, 118, 101, 77, 97, 105, 110, 116, 97, 105, 110, 82, 111, 117, 110, 100, 115 };
        // cooldownTime
        private static global::System.ReadOnlySpan<byte> GetSpan_cooldownTime() => new byte[1 + 12] { 172, 99, 111, 111, 108, 100, 111, 119, 110, 84, 105, 109, 101 };
        // logic
        private static global::System.ReadOnlySpan<byte> GetSpan_logic() => new byte[1 + 5] { 165, 108, 111, 103, 105, 99 };
        // colliderType
        private static global::System.ReadOnlySpan<byte> GetSpan_colliderType() => new byte[1 + 12] { 172, 99, 111, 108, 108, 105, 100, 101, 114, 84, 121, 112, 101 };
        // subInfoIds
        private static global::System.ReadOnlySpan<byte> GetSpan_subInfoIds() => new byte[1 + 10] { 170, 115, 117, 98, 73, 110, 102, 111, 73, 100, 115 };
        // parameters
        private static global::System.ReadOnlySpan<byte> GetSpan_parameters() => new byte[1 + 10] { 170, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115 };
        // viewInfoIds
        private static global::System.ReadOnlySpan<byte> GetSpan_viewInfoIds() => new byte[1 + 11] { 171, 118, 105, 101, 119, 73, 110, 102, 111, 73, 100, 115 };
        // tags
        private static global::System.ReadOnlySpan<byte> GetSpan_tags() => new byte[1 + 4] { 164, 116, 97, 103, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MacacaGames.EffectSystem.Model.EffectInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(21);
            writer.WriteRaw(GetSpan_id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.id, options);
            writer.WriteRaw(GetSpan_type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.type, options);
            writer.WriteRaw(GetSpan_inputType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.inputType, options);
            writer.WriteRaw(GetSpan_taxonomy());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy>(formatterResolver).Serialize(ref writer, value.taxonomy, options);
            writer.WriteRaw(GetSpan_inputBase());
            writer.Write(value.inputBase);
            writer.WriteRaw(GetSpan_activeCondition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.activeCondition, options);
            writer.WriteRaw(GetSpan_activeRequirementLists());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>>(formatterResolver).Serialize(ref writer, value.activeRequirementLists, options);
            writer.WriteRaw(GetSpan_deactiveCondition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.deactiveCondition, options);
            writer.WriteRaw(GetSpan_deactiveRequirementLists());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>>(formatterResolver).Serialize(ref writer, value.deactiveRequirementLists, options);
            writer.WriteRaw(GetSpan_triggerTransType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.triggerTransType, options);
            writer.WriteRaw(GetSpan_activeProbability());
            writer.Write(value.activeProbability);
            writer.WriteRaw(GetSpan_deactiveProbability());
            writer.Write(value.deactiveProbability);
            writer.WriteRaw(GetSpan_activeMaintainActions());
            writer.Write(value.activeMaintainActions);
            writer.WriteRaw(GetSpan_activeMaintainRounds());
            writer.Write(value.activeMaintainRounds);
            writer.WriteRaw(GetSpan_cooldownTime());
            writer.Write(value.cooldownTime);
            writer.WriteRaw(GetSpan_logic());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.logic, options);
            writer.WriteRaw(GetSpan_subInfoIds());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.subInfoIds, options);
            writer.WriteRaw(GetSpan_parameters());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Serialize(ref writer, value.parameters, options);
            writer.WriteRaw(GetSpan_viewInfoIds());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.viewInfoIds, options);
            writer.WriteRaw(GetSpan_tags());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Serialize(ref writer, value.tags, options);
        }

        public global::MacacaGames.EffectSystem.Model.EffectInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MacacaGames.EffectSystem.Model.EffectInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701869940UL:
                                ____result.type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1936154996UL:
                                ____result.tags = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8104601863593160297UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                ____result.inputType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8313999455056588393UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                ____result.inputBase = reader.ReadSingle();
                                continue;

                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8749772171157987700UL) { goto FAIL; }

                        ____result.taxonomy = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MacacaGames.EffectSystem.Model.EffectInfo.EffectTaxonomy>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_activeCondition().Slice(1))) { goto FAIL; }

                        ____result.activeCondition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 22:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_activeRequirementLists().Slice(1))) { goto FAIL; }

                        ____result.activeRequirementLists = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7311146993687029092UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_deactiveCondition().Slice(1 + 8))) { goto FAIL; }

                                ____result.deactiveCondition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8237195277710418785UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_activeProbability().Slice(1 + 8))) { goto FAIL; }

                                ____result.activeProbability = reader.ReadSingle();
                                continue;

                        }
                    case 24:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_deactiveRequirementLists().Slice(1))) { goto FAIL; }

                        ____result.deactiveRequirementLists = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::MacacaGames.EffectSystem.Model.ConditionRequirement>>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_triggerTransType().Slice(1))) { goto FAIL; }

                        ____result.triggerTransType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_deactiveProbability().Slice(1))) { goto FAIL; }

                        ____result.deactiveProbability = reader.ReadSingle();
                        continue;
                    case 21:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_activeMaintainActions().Slice(1))) { goto FAIL; }

                        ____result.activeMaintainActions = reader.ReadInt32();
                        continue;
                    case 20:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_activeMaintainRounds().Slice(1))) { goto FAIL; }

                        ____result.activeMaintainRounds = reader.ReadInt32();
                        continue;
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7959953343507296099UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701669204UL) { goto FAIL; }

                                ____result.cooldownTime = reader.ReadInt32();
                                continue;

                            case 8243105096924950371UL:
                                // if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869908UL) { goto FAIL; }

                                // ____result.colliderType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MacacaGames.EffectSystem.Model.ColliderType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 426970148716UL) { goto FAIL; }

                        ____result.logic = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5291560711047247219UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29540UL) { goto FAIL; }

                                ____result.subInfoIds = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7310579615589884272UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29554UL) { goto FAIL; }

                                ____result.parameters = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_viewInfoIds().Slice(1))) { goto FAIL; }

                        ____result.viewInfoIds = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

